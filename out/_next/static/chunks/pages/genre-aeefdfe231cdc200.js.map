{"version":3,"file":"static/chunks/pages/genre-aeefdfe231cdc200.js","mappings":"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","sources":["webpack://_N_E/?3ace","webpack://_N_E/./actions/setSelectedMenuItemName.js","webpack://_N_E/./components/SortBy/index.js","webpack://_N_E/./components/UI/FormControl/index.js","webpack://_N_E/./components/UI/Label/index.js","webpack://_N_E/./components/UI/TheSelectSearch/index.js","webpack://_N_E/./actions/getGenreMovies.js","webpack://_N_E/./pages/genre/index.js","webpack://_N_E/./utils/constants/select-search.js","webpack://_N_E/./components/UI/TheSelectSearch/default-style.module.css"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/genre\",\n      function () {\n        return require(\"private-next-pages/genre/index.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/genre\"])\n      });\n    }\n  ","\r\nimport * as TYPES from './types';\r\n\r\n// Set the current selected menu item (discover or genre) if is valid\r\nconst setSelectedMenuItemName = name => dispatch => {\r\n  if (!name) {\r\n    dispatch({type: TYPES.UNSET_SELECTED_MENU_ITEM_NAME});\r\n  } else {\r\n    dispatch({\r\n      type: TYPES.SET_SELECTED_MENU_ITEM_NAME,\r\n      payload: name\r\n    });\r\n  }\r\n};\r\n\r\nexport default setSelectedMenuItemName;\r\n","\r\n\r\nimport TheSelectSearch from 'components/UI/TheSelectSearch';\r\nimport { SORT_BY_OPTIONS } from 'utils/constants/select-search';\r\n\r\n// TODO: it's static (options are hardcoded) now but it should be dynamically populated using async feature of react-select-search package\r\nconst SortBy = props => (\r\n  <TheSelectSearch\r\n    options={SORT_BY_OPTIONS}\r\n    {...props} />\r\n);\r\n\r\nexport default SortBy;\r\n","\r\n\r\nimport clsx from 'clsx';\r\n\r\nconst CLASS_NAME = 'form-control';\r\n\r\nconst FormControl = ({\r\n  className,\r\n  ...rest\r\n}) => (\r\n  <>\r\n    <div\r\n      className={clsx(CLASS_NAME, className)}\r\n      {...rest} />\r\n    <style jsx>{`\r\n      .${CLASS_NAME} {\r\n        margin: 8px 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n      }\r\n      .${CLASS_NAME} > :global(label + *) {\r\n        margin-top: 4px;\r\n      }\r\n    `}</style>\r\n  </>\r\n);\r\n\r\nexport default FormControl;\r\n","\r\n\r\nimport clsx from 'clsx';\r\n\r\nconst CLASS_NAME = 'label';\r\n\r\nconst Label = ({\r\n  className,\r\n  ...rest\r\n}) => (\r\n  <>\r\n    <label\r\n      className={clsx(CLASS_NAME, className)}\r\n      {...rest} />\r\n    <style jsx>{`\r\n      .${CLASS_NAME} {\r\n        font-size: 1.5rem;\r\n      }\r\n    `}</style>\r\n  </>\r\n);\r\n\r\nexport default Label;\r\n","\r\n\r\nimport SelectSearch from 'react-select-search/dist/cjs';\r\nimport clsx from 'clsx';\r\n\r\nimport Label from 'components/UI/Label';\r\nimport FormControl from 'components/UI/FormControl';\r\nimport defaultClasses from 'components/UI/TheSelectSearch/default-style.module.css';\r\n\r\nconst TheSelectSearch = React.forwardRef(({\r\n  id,\r\n  name,\r\n  label,\r\n  classes,\r\n  ...rest\r\n}, ref) => (\r\n  <>\r\n    <FormControl>\r\n      {label && <Label htmlFor={id}>{label}</Label>}\r\n      <SelectSearch\r\n        ref={ref}\r\n        className={key => clsx(defaultClasses?.[key], classes?.[key])}\r\n        renderValue={valueProps => (\r\n          <input\r\n            id={id}\r\n            name={name}\r\n            className={clsx(defaultClasses?.['input'], classes?.['input'])}\r\n            {...valueProps} />\r\n        )}\r\n        {...rest} />\r\n    </FormControl>\r\n  </>\r\n));\r\n\r\nexport default TheSelectSearch;\r\n","import Router from 'next/router';\r\n\r\nimport * as TYPES from './types';\r\nimport tmdbAPI from 'services/tmdbAPI';\r\nimport LINKS from 'utils/constants/links';\r\nimport { TMDB_API_VERSION } from 'config/tmdb';\r\n\r\nconst getGenreMovies = (genreId, page, sort) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const { selectedMenuItemName } = getState().general;\r\n  if (!selectedMenuItemName) {\r\n    return;\r\n  }\r\n  try {\r\n    dispatch({type: TYPES.SET_MOVIES_LOADING});\r\n    const response = await tmdbAPI.get(`/${TMDB_API_VERSION}/discover/movie`, {\r\n      params: {\r\n        with_genres: genreId,\r\n        page,\r\n        sort_by: sort\r\n      }\r\n    });\r\n    await dispatch({\r\n      type: TYPES.FETCH_GENRE_MOVIES,\r\n      payload: response.data\r\n    });\r\n    dispatch({type: TYPES.UNSET_MOVIES_LOADING});\r\n  } catch (error) {\r\n    console.log('[getGenreMovies] error => ', error);\r\n    dispatch({type: TYPES.INSERT_ERROR, payload: error.response});\r\n    Router.push(LINKS.ERROR.HREF);\r\n  }\r\n};\r\n\r\nexport default getGenreMovies;\r\n","\r\nimport { useEffect, useState } from 'react';\r\nimport Head from 'next/head';\r\nimport Router, { useRouter } from 'next/router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\n\r\nimport Header from 'parts/Header';\r\nimport PageWrapper from 'parts/PageWrapper';\r\nimport PaddingWrapper from 'parts/PaddingWrapper';\r\nimport MovieList from 'components/MovieList';\r\nimport Loader from 'components/UI/Loader';\r\nimport SortBy from 'components/SortBy';\r\nimport setSelectedMenuItemName from 'actions/setSelectedMenuItemName';\r\nimport getGenreMovies from 'actions/getGenreMovies';\r\nimport clearMovies from 'actions/clearMovies';\r\nimport { SORT_BY_OPTIONS } from 'utils/constants/select-search';\r\nimport QUERY_PARAMS from 'utils/constants/query-params';\r\nimport LINKS from 'utils/constants/links';\r\nimport checkEmptyObject from 'utils/helpers/checkEmptyObject';\r\n\r\nconst Genre = () => {\r\n  const dispatch = useDispatch();\r\n  const general = useSelector(state => state.general);\r\n  const movies = useSelector(state => state.movies);\r\n  const { query } = useRouter();\r\n  const [sortByOptionValue, setSortByOptionValue] = useState(SORT_BY_OPTIONS[0].value);\r\n\r\n  const genreId = query[QUERY_PARAMS.ID];\r\n  const genreName = query[QUERY_PARAMS.NAME];\r\n  const page = Number(query[QUERY_PARAMS.PAGE]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(setSelectedMenuItemName());\r\n      dispatch(clearMovies());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (checkEmptyObject(query)) return;\r\n\r\n    const initialGenreId = Router.query[QUERY_PARAMS.ID];\r\n    const initialGenreName = Router.query[QUERY_PARAMS.NAME];\r\n    const initialPage = Router.query[QUERY_PARAMS.PAGE];\r\n\r\n    if (!initialPage) {\r\n      const newGenreId = initialGenreId;\r\n      const newGenreName = initialGenreName;\r\n      const newPage = 1;\r\n      console.log('[Genre useEffect] query parameter update: newGenreId, newGenreName, newPage => ', newGenreId, newGenreName, newPage);\r\n      Router.replace({\r\n        pathname: LINKS.GENRE.HREF,\r\n        query: {\r\n          [QUERY_PARAMS.ID]: newGenreId,\r\n          [QUERY_PARAMS.NAME]: newGenreName,\r\n          [QUERY_PARAMS.PAGE]: newPage\r\n        }\r\n      });\r\n    }\r\n  }, [dispatch, query]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!genreId || !genreName || !page || !sortByOptionValue) return;\r\n      \r\n      scroll.scrollToTop({smooth: true});\r\n\r\n      await dispatch(setSelectedMenuItemName(genreName));\r\n      dispatch(getGenreMovies(genreId, page, sortByOptionValue));\r\n    })();\r\n  }, [genreId, genreName, page, sortByOptionValue, dispatch]);\r\n\r\n  if (movies.loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  const { secure_base_url: baseUrl } = general.base.images;\r\n\r\n  const sortByOptionValueOnChangeHandler = newSortByOptionValue => {\r\n    setSortByOptionValue(newSortByOptionValue);\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <PaddingWrapper>\r\n        <Head>\r\n          <title>{`${general.selectedMenuItemName} Movies`}</title>\r\n        </Head>\r\n        <Header\r\n          title={general.selectedMenuItemName}\r\n          subtitle='movies' />\r\n        <SortBy\r\n          value={sortByOptionValue}\r\n          onChange={sortByOptionValueOnChangeHandler} />\r\n        <MovieList\r\n          movies={movies}\r\n          baseUrl={baseUrl} />\r\n      </PaddingWrapper>\r\n    </PageWrapper>\r\n  );\r\n};\r\n\r\nexport default Genre;\r\n","\r\n// TODO: vulnerable\r\nconst YES_OR_NO_OPTIONS = [\r\n  {value: 'true', name: 'Yes'},\r\n  {value: 'false', name: 'No'}\r\n];\r\n\r\nconst SORT_BY_OPTIONS = [\r\n  {value: 'popularity.desc', name: 'Popularity'},\r\n  {value: 'vote_average.desc', name: 'Votes Average'},\r\n  {value: 'original_title.asc', name: 'Original Title'},\r\n  {value: 'release_date.desc', name: 'Release Date'}\r\n];\r\n\r\nexport {\r\n  YES_OR_NO_OPTIONS,\r\n  SORT_BY_OPTIONS\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"default-style_container__ZVDms\",\"value\":\"default-style_value__Oymd5\",\"input\":\"default-style_input__FvkTm\",\"select\":\"default-style_select__kFni6\",\"options\":\"default-style_options__agvf9\",\"row\":\"default-style_row__BqrmU\",\"option\":\"default-style_option__QLofT\",\"container--multiple\":\"default-style_container--multiple__g_wAb\",\"is-selected\":\"default-style_is-selected__al2oj\",\"is-highlighted\":\"default-style_is-highlighted__kkxyn\",\"group-header\":\"default-style_group-header__Zl5C_\",\"is-disabled\":\"default-style_is-disabled__xDksQ\",\"is-loading\":\"default-style_is-loading__bXiOt\",\"container--search\":\"default-style_container--search__0TDYG\"};"],"names":["window","__NEXT_P","push","name","dispatch","type","TYPES","payload","props","TheSelectSearch","options","SORT_BY_OPTIONS","CLASS_NAME","className","rest","div","clsx","label","forwardRef","ref","id","classes","FormControl","Label","htmlFor","SelectSearch","key","defaultClasses","renderValue","valueProps","input","genreId","page","sort","getState","response","general","selectedMenuItemName","tmdbAPI","TMDB_API_VERSION","params","with_genres","sort_by","data","console","log","error","Router","LINKS","useDispatch","useSelector","state","movies","useRouter","query","useState","sortByOptionValue","setSortByOptionValue","QUERY_PARAMS","genreName","Number","useEffect","setSelectedMenuItemName","clearMovies","checkEmptyObject","initialGenreId","initialGenreName","newGenreId","newGenreName","pathname","scroll","smooth","getGenreMovies","loading","Loader","secure_base_url","base","images","PageWrapper","PaddingWrapper","Head","title","Header","subtitle","SortBy","value","onChange","newSortByOptionValue","MovieList","baseUrl","YES_OR_NO_OPTIONS","module","exports"],"sourceRoot":""}