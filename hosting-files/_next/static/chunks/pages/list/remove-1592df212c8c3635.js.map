{"version":3,"file":"static/chunks/pages/list/remove-1592df212c8c3635.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,eACA,WACE,OAAO,EAAQ,U,qHCmGvB,IA/FuB,Y,IAgBR,EAWA,EAWA,EAtCWC,EAAM,EAANA,OAClB,GAAeC,EAAAA,EAAAA,aAAbC,SAEFC,EAAkB,CACtB,CACEC,MAAO,YACPC,KAAM,CACJH,SAAUI,EAAAA,EAAAA,iBAAAA,KACVC,OAAQ,UAACC,EAAAA,EAAAA,GAAkBR,IAE7BS,UAAU,GAEZ,CACEL,MAAO,YACPC,KAAM,CACJH,SAAUI,EAAAA,EAAAA,KAAAA,KACVC,OAAO,EAGN,IAFC,OADK,EACJC,EAAAA,EAAAA,GAAkBR,IACnB,OAFK,EAEJQ,EAAAA,EAAAA,KAAoB,GAFhB,IAKTC,UAAU,GAEZ,CACEL,MAAO,mBACPC,KAAM,CACJH,SAAUI,EAAAA,EAAAA,4BAAAA,KACVC,OAAO,EAGN,IAFC,OADK,EACJC,EAAAA,EAAAA,QAAuBR,IACxB,OAFK,EAEJQ,EAAAA,EAAAA,KAAoB,GAFhB,IAKTC,UAAU,GAEZ,CACEL,MAAO,eACPC,KAAM,CACJH,SAAUI,EAAAA,EAAAA,kBAAAA,KACVC,OAAO,EAAwD,IAAvD,OAAD,EAAEC,EAAAA,EAAAA,QAAuBR,IAAQ,OAAjC,EAAkCQ,EAAAA,EAAAA,KAAoB,GAAtD,IAETC,UAAU,GAEZ,CACEL,MAAO,cACPC,KAAM,CACJH,SAAUI,EAAAA,EAAAA,YAAAA,KACVC,OAAQ,UAACC,EAAAA,EAAAA,GAAkBR,IAE7BS,UAAU,IAIRC,EAAkB,CACtB,CACEN,MAAO,sBACPC,KAAM,CACJH,SAAUI,EAAAA,EAAAA,iBAAAA,MAEZG,UAAU,GAEZ,CACEL,MAAO,mBACPC,KAAM,CACJH,SAAUI,EAAAA,EAAAA,4BAAAA,MAEZG,UAAU,GAEZ,CACEL,MAAO,sBACPC,KAAM,CACJH,SAAUI,EAAAA,EAAAA,kBAAAA,MAEZG,UAAU,IAIVE,EAAYX,EAASG,EAAkBO,EAE3C,OACE,SAACE,EAAAA,EAAM,C,SACJD,EAAUE,KAAIC,SAAAA,G,OACb,SAACC,EAAAA,EAAU,CAETN,SAAUK,EAASL,SACnBO,SAAUd,IAAaY,EAAST,KAAKH,S,UACrC,SAACe,IAAI,CACHZ,KAAMS,EAAST,K,UACf,SAACa,IAAC,C,SAAEJ,EAASV,WALVU,EAASV,c,2QCpExB,EArBuB,Y,IACrBe,EAAQ,EAARA,SACGC,GAAI,UADPD,a,OAGA,sB,WACE,SAACE,OAAG,kBAAKD,GAAI,C,mCAAJA,GAAI,MAAJA,EAAI,WAAJA,EAAI,e,SACVD,M,2dCuJP,GAAeG,EAAAA,EAAAA,IAtIA,Y,IACbC,EAAS,EAATA,UACAC,EAAW,EAAXA,YAGMxB,GADYC,EAAAA,EAAAA,aAAVM,MACaC,EAAAA,EAAAA,IAEOiB,GAAAA,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,MAA9BC,EAAqBF,EAAuB,GAApCG,EAAaH,EAAuB,GACXA,GAAAA,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,MAA1CG,EAAiCJ,EAAuB,GAA1CK,EAAmBL,EAAuB,GAErCA,GAAAA,EAAAA,EAAAA,UAAS,MAA5BM,EAAmBN,EAAc,GAA1BO,EAAYP,EAAc,GAEUA,GAAAA,EAAAA,EAAAA,WAAS,GAApDQ,EAA2CR,EAAe,GAAvCS,EAAwBT,EAAe,IAEjEU,EAAAA,EAAAA,YAAU,YACP,8B,IAOSC,E,oEANHpC,EAAQ,C,mDACRwB,EAAa,C,mDACbD,EAAW,C,gEAGdK,EAAUF,EAAAA,EAAAA,S,UACaW,EAAAA,EAAAA,IAAY,IAAiCrC,OAA7BsC,EAAAA,GAAqB,UAAe,OAAPtC,GAAU,CAC5EuC,QAAS,CACP,cAAiB,UAAsB,OAAZf,M,WAFzBY,EAAW,EAAH,KAKCA,EAASI,KACbC,WAAWC,KAAOnB,EAAS,C,gBACpCK,EAAUF,EAAAA,EAAAA,U,wBAEV,MAAM,IAAIiB,MAAM,+C,0DAGlBC,QAAQC,IAAI,+BAAgC,EAAF,IAC1CjB,EAAUF,EAAAA,EAAAA,UACVM,EAAS,EAAD,I,yDArBX,KAwBA,CAAChC,EAAQwB,EAAaD,IAEzB,IA4CgBQ,EAxCVe,EAA0B,WAC9BZ,GAAqB,IAGjBa,EAAoB,W,OAAA,8B,IAIhBR,E,iFAFNO,IAEMP,EAAU,CACd,cAAiB,UAAsB,OAAZf,IAG7BM,EAAgBJ,EAAAA,EAAAA,S,SAEVW,EAAAA,EAAAA,OAAe,IAAiCrC,OAA7BsC,EAAAA,GAAqB,UAAe,OAAPtC,GAAU,CAACuC,QAAAA,I,OAEjET,EAAgBJ,EAAAA,EAAAA,UAEhBsB,IAAAA,KAAY,CACV9C,SAAUI,EAAAA,EAAAA,SAAAA,KACVC,OACE,UAACC,EAAAA,EAAAA,KAAoB,K,kDAIzBoC,QAAQC,IAAI,uCAAwC,EAAF,IAClDf,EAAgBJ,EAAAA,EAAAA,U,4GAtBM,GA2B1B,OAAIC,IAAWD,EAAAA,EAAAA,MAAiBC,IAAWD,EAAAA,EAAAA,SAClC,SAACuB,EAAAA,EAAM,IAGZtB,IAAWD,EAAAA,EAAAA,UAGX,SAACwB,EAAAA,EAAQ,CACP9C,MAAM,SACN+C,SAAwB,QAAdpB,EAAK,OAALA,QAAK,IAALA,OAAAA,EAAAA,EAAOqB,eAAO,IAAdrB,EAAAA,EAAkB,iDAI9BJ,IAAWD,EAAAA,EAAAA,UAEX,sB,WACE,SAAC2B,IAAI,C,UACH,SAACjD,QAAK,C,SAAC,mBAET,SAACkD,EAAAA,EAAW,C,UACV,UAACC,EAAAA,EAAc,C,WACb,SAACC,EAAAA,EAAM,CACLpD,MAAM,cACN+C,SAAS,UACX,SAACM,EAAAA,EAAc,CAACzD,OAAQA,KACxB,SAAC0D,EAAAA,EAAK,CACJC,OAAQ1B,EACR2B,QAASd,EACT1C,MAAM,gBACNyD,MAAM,SAACC,IAAC,C,SAAC,4DACTC,QACE,UAACC,EAAc,C,WACb,SAACC,EAAAA,EAAU,CAACC,QAASpB,E,SAAyB,QAG9C,SAACmB,EAAAA,EAAU,CAACC,QAASnB,E,SAAmB,cAK9C,UAACoB,EAAAA,EAAW,C,WACV,SAACC,EAAAA,EAAK,CAACC,QAAQ,qB,SAAqB,0EAGpC,SAACC,EAAAA,EAAM,CACL5B,GAAG,qBACH6B,QAAS1C,IAAiBH,EAAAA,EAAAA,QAC1B8C,WAAS,EACTpE,MAAM,SACN8D,QApFiB,WAC7BhC,GAAqB,sBA+CvB,M,gHChGMuC,SADCrD,G,SAHHsD,YAAAA,SAAe,K,IAEf3C,GAAK,6B,EAEO,qBAEV,kBACF,U,UAWmB2C,EAAAA,EAAAA,KAAAA,GAAe,wBAChC3C,IAAK,G,GAEP,CACD,kBACJ,UAED,KAdQ,cACH,uDAED,6G","sources":["webpack://_N_E/?755e","webpack://_N_E/./containers/ListNavigation/index.js","webpack://_N_E/./parts/ActionsWrapper/index.js","webpack://_N_E/./pages/list/remove/index.js","webpack://_N_E/./utils/hocs/withAuth/index.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/list/remove\",\n      function () {\n        return require(\"private-next-pages/list/remove/index.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/list/remove\"])\n      });\n    }\n  ","\r\nimport Link from 'next/link';\r\nimport { useRouter } from 'next/router';\r\n\r\nimport Navbar, { NavbarItem } from 'components/UI/Navbar';\r\nimport LINKS from 'utils/constants/links';\r\nimport QUERY_PARAMS from 'utils/constants/query-params';\r\n\r\nconst ListNavigation = ({ listId }) => {\r\n  const { pathname } = useRouter();\r\n\r\n  const updateListLinks = [\r\n    {\r\n      title: 'Edit List',\r\n      href: {\r\n        pathname: LINKS.ADD_OR_EDIT_LIST.HREF,\r\n        query: {[QUERY_PARAMS.ID]: listId}\r\n      },\r\n      disabled: false\r\n    },\r\n    {\r\n      title: 'View List',\r\n      href: {\r\n        pathname: LINKS.LIST.HREF,\r\n        query: {\r\n          [QUERY_PARAMS.ID]: listId,\r\n          [QUERY_PARAMS.PAGE]: 1\r\n        }\r\n      },\r\n      disabled: false\r\n    },\r\n    {\r\n      title: 'Add/Remove Items',\r\n      href: {\r\n        pathname: LINKS.ADD_OR_REMOVE_ITEMS_AT_LIST.HREF,\r\n        query: {\r\n          [QUERY_PARAMS.LIST_ID]: listId,\r\n          [QUERY_PARAMS.PAGE]: 1\r\n        }\r\n      },\r\n      disabled: false\r\n    },\r\n    {\r\n      title: 'Choose Image',\r\n      href: {\r\n        pathname: LINKS.CHOOSE_LIST_IMAGE.HREF,\r\n        query: {[QUERY_PARAMS.LIST_ID]: listId, [QUERY_PARAMS.PAGE]: 1}\r\n      },\r\n      disabled: false\r\n    },\r\n    {\r\n      title: 'Delete List',\r\n      href: {\r\n        pathname: LINKS.REMOVE_LIST.HREF,\r\n        query: {[QUERY_PARAMS.ID]: listId}\r\n      },\r\n      disabled: false\r\n    }\r\n  ];\r\n\r\n  const createListLinks = [\r\n    {\r\n      title: 'Step1: List Details',\r\n      href: {\r\n        pathname: LINKS.ADD_OR_EDIT_LIST.HREF\r\n      },\r\n      disabled: false\r\n    },\r\n    {\r\n      title: 'Step2: Add Items',\r\n      href: {\r\n        pathname: LINKS.ADD_OR_REMOVE_ITEMS_AT_LIST.HREF\r\n      },\r\n      disabled: true\r\n    },\r\n    {\r\n      title: 'Step3: Choose Image',\r\n      href: {\r\n        pathname: LINKS.CHOOSE_LIST_IMAGE.HREF\r\n      },\r\n      disabled: true\r\n    }\r\n  ];\r\n\r\n  let listLinks = listId ? updateListLinks : createListLinks;\r\n\r\n  return (\r\n    <Navbar>\r\n      {listLinks.map(listLink => (\r\n        <NavbarItem\r\n          key={listLink.title}\r\n          disabled={listLink.disabled}\r\n          selected={pathname === listLink.href.pathname}>\r\n          <Link\r\n            href={listLink.href}>\r\n            <a>{listLink.title}</a>\r\n          </Link>\r\n        </NavbarItem>  \r\n      ))}\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default ListNavigation;\r\n","\r\nconst ActionsWrapper = ({\r\n  children,\r\n  ...rest\r\n}) => (\r\n  <>\r\n    <div {...rest}>\r\n      {children}\r\n    </div>\r\n    <style jsx>{`\r\n      div {\r\n        display: flex;\r\n        align-items: center;\r\n      }\r\n      \r\n      div > :global(:not(:first-child)) {\r\n        margin-left: 8px;\r\n      }\r\n    `}</style>\r\n  </>\r\n);\r\n\r\nexport default ActionsWrapper;\r\n","\r\nimport { useState, useEffect } from 'react';\r\nimport Router, { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\n\r\nimport Header from 'parts/Header';\r\nimport NotFound from 'parts/NotFound';\r\nimport PageWrapper from 'parts/PageWrapper';\r\nimport PaddingWrapper from 'parts/PaddingWrapper';\r\nimport ActionsWrapper from 'parts/ActionsWrapper';\r\nimport ListNavigation from 'containers/ListNavigation';\r\nimport Button from 'components/UI/Button';\r\nimport Modal from 'components/UI/Modal';\r\nimport TextButton from 'components/UI/TextButton';\r\nimport Label from 'components/UI/Label';\r\nimport FormControl from 'components/UI/FormControl';\r\nimport Loader from 'components/UI/Loader';\r\nimport { TMDB_API_NEW_VERSION } from 'config/tmdb';\r\nimport withAuth from 'utils/hocs/withAuth';\r\nimport QUERY_PARAMS from 'utils/constants/query-params';\r\nimport LINKS from 'utils/constants/links';\r\nimport STATUSES from 'utils/constants/statuses';\r\nimport tmdbAPI from 'services/tmdbAPI';\r\n\r\nconst Remove = ({\r\n  accountId,\r\n  accessToken\r\n}) => {\r\n  const { query } = useRouter();\r\n  const listId = query[QUERY_PARAMS.ID];\r\n\r\n  const [status, setStatus] = useState(STATUSES.IDLE);\r\n  const [removeStatus, setRemoveStatus] = useState(STATUSES.IDLE);\r\n  // TODO: could handle errors\r\n  const [error, setError] = useState(null);\r\n  // const [removeError, setRemoveError] = useState(null);\r\n  const [removeModalOpened, setRemoveModalOpened] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!listId) return;\r\n      if (!accessToken) return;\r\n      if (!accountId) return;\r\n\r\n      try {\r\n        setStatus(STATUSES.PENDING);\r\n        const response = await tmdbAPI.get(`/${TMDB_API_NEW_VERSION}/list/${listId}`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`\r\n          }\r\n        });\r\n        const movies = response.data;\r\n        if (movies.created_by.id === accountId) {\r\n          setStatus(STATUSES.RESOLVED);\r\n        } else {\r\n          throw new Error('You don\\'t seem to have access to this page.');\r\n        }\r\n      } catch (error) {\r\n        console.log('[Remove useEffect] error => ', error);\r\n        setStatus(STATUSES.REJECTED);\r\n        setError(error);\r\n      }\r\n    })();\r\n  }, [listId, accessToken, accountId]);\r\n\r\n  const openRemoveModalHandler = () => {\r\n    setRemoveModalOpened(true);\r\n  };\r\n\r\n  const closeRemoveModalHandler = () => {\r\n    setRemoveModalOpened(false);\r\n  };\r\n\r\n  const removeListHandler = async () => {\r\n    try {\r\n      closeRemoveModalHandler();\r\n\r\n      const headers = {\r\n        'Authorization': `Bearer ${accessToken}`\r\n      };\r\n      \r\n      setRemoveStatus(STATUSES.PENDING);\r\n\r\n      await tmdbAPI.delete(`/${TMDB_API_NEW_VERSION}/list/${listId}`, {headers});\r\n\r\n      setRemoveStatus(STATUSES.RESOLVED);\r\n\r\n      Router.push({\r\n        pathname: LINKS.MY_LISTS.HREF,\r\n        query: {\r\n          [QUERY_PARAMS.PAGE]: 1\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log('[Remove removeListHandler] error => ', error);\r\n      setRemoveStatus(STATUSES.REJECTED);\r\n      // setRemoveError(error);\r\n    }\r\n  };\r\n\r\n  if (status === STATUSES.IDLE || status === STATUSES.PENDING) {\r\n    return <Loader />;\r\n  }\r\n  \r\n  if (status === STATUSES.REJECTED) {\r\n    // TODO: should show proper error message based on error state\r\n    return (\r\n      <NotFound\r\n        title='Sorry!'\r\n        subtitle={error?.message ?? 'We can\\'t find the page you\\'re looking for...'} />\r\n    );\r\n  }\r\n\r\n  if (status === STATUSES.RESOLVED) {\r\n    return (\r\n      <>\r\n        <Head>\r\n          <title>Delete List</title>\r\n        </Head>\r\n        <PageWrapper>\r\n          <PaddingWrapper>\r\n            <Header\r\n              title='Delete List'\r\n              subtitle='Edit' />\r\n            <ListNavigation listId={listId} />\r\n            <Modal\r\n              opened={removeModalOpened}\r\n              onClose={closeRemoveModalHandler}\r\n              title='Are you sure?'\r\n              body={<p>By clicking yes, this list will be permanently deleted.</p>}\r\n              footer={\r\n                <ActionsWrapper>\r\n                  <TextButton onClick={closeRemoveModalHandler}>\r\n                    No\r\n                  </TextButton>\r\n                  <TextButton onClick={removeListHandler}>\r\n                    Yes\r\n                  </TextButton>\r\n                </ActionsWrapper>\r\n              } />\r\n            <FormControl>\r\n              <Label htmlFor='delete-list-button'>\r\n                Click the button below if you are sure you want to delete this list.\r\n              </Label>\r\n              <Button\r\n                id='delete-list-button'\r\n                loading={removeStatus === STATUSES.PENDING}\r\n                contained\r\n                title='Delete'\r\n                onClick={openRemoveModalHandler} />\r\n            </FormControl>\r\n          </PaddingWrapper>\r\n        </PageWrapper>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default withAuth(Remove);\r\n","\r\n\r\nimport NotFound from 'parts/NotFound';\r\nimport { useAuth } from 'utils/hocs/AuthProvider';\r\n\r\n/**\r\n * TODO:\r\n * Should handle error state and show proper error message based on error state. \r\n */\r\n\r\nconst withAuth = WrappedComponent => {\r\n  return React.forwardRef(function AuthComponent(props, ref) {\r\n    const {\r\n      isAuthenticated,\r\n      // TODO: could handle errors\r\n      error,\r\n      ...rest\r\n    } = useAuth();\r\n\r\n    if (!isAuthenticated) {\r\n      return (\r\n        <NotFound\r\n          title=\"You don't have permission to access this page!\"\r\n          subtitle=\"You've tried to request a page that requires you to be logged in. Log in to your account.\" />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <WrappedComponent\r\n        ref={ref}\r\n        {...props}\r\n        isAuthenticated={isAuthenticated}\r\n        error={error}\r\n        {...rest} />\r\n    );\r\n  });\r\n};\r\n\r\nexport default withAuth;\r\n"],"names":["window","__NEXT_P","push","listId","useRouter","pathname","updateListLinks","title","href","LINKS","query","QUERY_PARAMS","disabled","createListLinks","listLinks","Navbar","map","listLink","NavbarItem","selected","Link","a","children","rest","div","withAuth","accountId","accessToken","useState","STATUSES","status","setStatus","removeStatus","setRemoveStatus","error","setError","removeModalOpened","setRemoveModalOpened","useEffect","response","tmdbAPI","TMDB_API_NEW_VERSION","headers","data","created_by","id","Error","console","log","closeRemoveModalHandler","removeListHandler","Router","Loader","NotFound","subtitle","message","Head","PageWrapper","PaddingWrapper","Header","ListNavigation","Modal","opened","onClose","body","p","footer","ActionsWrapper","TextButton","onClick","FormControl","Label","htmlFor","Button","loading","contained","useAuth","isAuthenticated"],"sourceRoot":""}