{"version":3,"file":"static/chunks/pages/index-4693f92277307c1e.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,IACA,WACE,OAAO,EAAQ,U,gDCWvB,IAXgCC,SAAAA,G,OAAQC,SAAAA,GAIpCA,EAHGD,EAGM,CACPE,KAAMC,EAAAA,GACNC,QAASJ,GAJF,CAACE,KAAMC,EAAAA,Q,2SC8BpB,EA1BgC,SAACH,EAAMK,G,yBAAS,4BAAOJ,EAAUK,G,IACZA,EAA3CC,EAAsBC,EAMtBC,EAIAC,E,oEAV2CJ,EAAAA,IAAWK,QAAtDJ,EAA2CD,EAA3CC,qBAAsBC,EAAqBF,EAArBE,iBACzBD,EAAsB,C,gEAIzBN,EAAS,CAACC,KAAMC,EAAAA,KACVM,EAAmBD,EACtBI,QAAOC,SAAAA,G,OAAWA,EAAQb,OAASA,KACnCc,KAAID,SAAAA,G,OAAWA,EAAQE,MACvBC,KAAK,I,SACeC,EAAAA,EAAAA,IAAY,IAA8BR,OAA1BS,EAAAA,GAAiB,WAA0B,OAAjBT,GAAoB,CACnFU,OAAQ,CAACd,KAAAA,K,cADLK,EAAW,EAAH,K,UAGRT,EAAS,CACbC,KAAMC,EAAAA,GACNC,QAASM,EAASU,O,QAEpBnB,EAAS,CAACC,KAAMC,EAAAA,K,kDAEhBkB,QAAQC,IAAI,sCAAuC,EAAF,IACjDrB,EAAS,CAACC,KAAMC,EAAAA,GAAoBC,QAASmB,EAAAA,GAAMb,WACnDc,IAAAA,KAAYC,EAAAA,EAAAA,MAAAA,M,0EAtBuCxB,EAAUK,G,6FCqBd,aAC3C,GAAYoB,EAAAA,EAAAA,KAAVC,SAAK,GAEPC,OAAAA,EAAY,WAGlBC,GAAU,SAAM,YACd,OAAO,Y,GAEL5B,EAAAA,EAAAA,aAAS6B,M,EACT,gBACD,uB,gBAAC7B,WAAW,kBAEf4B,GAAU,UACR,gB,CAIA,K,gBAGE,W,GAEAR,IAAAA,OAAAA,SAAY,2B,OAKT,wBAJHG,EAAe,IAAD,MAAC,U,MAEX,E,IASFG,GACE,EADK,C,IAOHI,EAHH,cACE,EAAIC,EACT,QAAMC,IAAAA,mGAAqC,KAE3CZ,IAAAA,QAAY,CAEH,OAGN,+D,GAHDM,IACE,EADK,C,IAOV,EAHI,IAEHN,QAAQC,IAAI,0FAAuF,EAD9F,GAGN,aAAS,yDAHH,GAGG,UAEZO,QAAU,+FA7BF,C,IAMEE,EAHH,cAEH,QAAME,IAAAA,qHAAiD,EAD7CD,GAGVX,IAAAA,QAAY,CAEH,OAGN,kDAROW,GAQP,S,mIAqBHE,GAAOC,GAAY,GAACC,EAAAA,KAAY,EAAG,M,OAE7BnC,EAAAA,OAASoC,U,cACfpC,EAAAA,GAAAA,YAASqC,C,0CACN,UACJ,OAAa,UAAM,mBAAa,M,KAInC,C,YAKqB,E,EAAbC,KAAI,OAAS,gB,OACbC,EAAAA,EAAAA,MAAG,WAAO,C,WAEVC,EAAAA,EAAAA,MAAO,IAAuBvB,C,SAC9BwB,EAAqB,iB,gHAElB,sBAKH,iBAACC,C,qEAGuB,gC,UACtB,UAACC,EAAAA,EAAS,C,SACRC,EACSC,EAAAA,EAAAA,KAAAA,EAAAA,EAAO,CAAI,6B,qBAEZ,c,SAGlB,uB","sources":["webpack://_N_E/","webpack://_N_E/./actions/setSelectedMenuItemName.js","webpack://_N_E/./actions/getStaticCategoryMovies.js","webpack://_N_E/./pages/index.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","\r\nimport * as TYPES from './types';\r\n\r\n// Set the current selected menu item (discover or genre) if is valid\r\nconst setSelectedMenuItemName = name => dispatch => {\r\n  if (!name) {\r\n    dispatch({type: TYPES.UNSET_SELECTED_MENU_ITEM_NAME});\r\n  } else {\r\n    dispatch({\r\n      type: TYPES.SET_SELECTED_MENU_ITEM_NAME,\r\n      payload: name\r\n    });\r\n  }\r\n};\r\n\r\nexport default setSelectedMenuItemName;\r\n","\r\n\r\nimport Router from 'next/router';\r\n\r\nimport * as TYPES from './types';\r\nimport { alternativeTmdbAPI as tmdbAPI } from 'services/tmdbAPI';\r\nimport LINKS from 'utils/constants/links';\r\nimport { TMDB_API_VERSION } from 'config/tmdb';\r\n\r\n// Get Popular, Top Rated, and Upcoming movies\r\nconst getStaticCategoryMovies = (name, page) => async (dispatch, getState) => {\r\n  const { selectedMenuItemName, staticCategories } = getState().general;\r\n  if (!selectedMenuItemName) {\r\n    return;\r\n  }\r\n  try {\r\n    dispatch({type: TYPES.SET_MOVIES_LOADING});\r\n    const staticCategoryId = staticCategories\r\n      .filter(element => element.name === name)\r\n      .map(element => element.id)\r\n      .join('');\r\n    const response = await tmdbAPI.get(`/${TMDB_API_VERSION}/movie/${staticCategoryId}`, {\r\n      params: {page}\r\n    });\r\n    await dispatch({\r\n      type: TYPES.FETCH_STATIC_CATEGORY_MOVIES,\r\n      payload: response.data\r\n    });\r\n    dispatch({type: TYPES.UNSET_MOVIES_LOADING});\r\n  } catch (error) {\r\n    console.log('[getStaticCategoryMovies] error => ', error);\r\n    dispatch({type: TYPES.INSERT_ERROR, payload: error.response});\r\n    Router.push(LINKS.ERROR.HREF);\r\n  }\r\n};\r\n\r\nexport default getStaticCategoryMovies;\r\n","/**\r\n * TODO:\r\n * https://nextjs.org/blog/next-9#automatic-partial-static-export RE: https://github.com/vercel/next.js/discussions/10874\r\n * Should have API abort logic when components being unmounted to avoid memory leak.\r\n * Should use finite states model instead of boolean loading state (at /index, /genre, /movie, /person, and /search pages).\r\n * Should double-check if `react-scroll` is working as expected and fix.\r\n */\r\n\r\nimport { useEffect } from 'react';\r\nimport Head from 'next/head';\r\nimport Router, { useRouter } from 'next/router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\n\r\nimport Header from 'parts/Header';\r\nimport PageWrapper from 'parts/PageWrapper';\r\nimport PaddingWrapper from 'parts/PaddingWrapper';\r\nimport MovieList from 'components/MovieList';\r\nimport Loader from 'components/UI/Loader';\r\nimport setSelectedMenuItemName from 'actions/setSelectedMenuItemName';\r\nimport getStaticCategoryMovies from 'actions/getStaticCategoryMovies';\r\nimport clearMovies from 'actions/clearMovies';\r\nimport STATIC_MOVIE_CATEGORIES from 'utils/constants/static-movie-categories';\r\nimport QUERY_PARAMS from 'utils/constants/query-params';\r\nimport LINKS from 'utils/constants/links';\r\nimport checkEmptyObject from 'utils/helpers/checkEmptyObject';\r\nimport { TMDB_API_KEY, TMDB_API_BASE_URL, TMDB_API_VERSION } from 'config/tmdb';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const general = useSelector(state => state.general);\r\n  const movies = useSelector(state => state.movies);\r\n  const { query } = useRouter();\r\n\r\n  const categoryName = query[QUERY_PARAMS.CATEGORY];\r\n  const page = Number(query[QUERY_PARAMS.PAGE]);\r\n  \r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(setSelectedMenuItemName());\r\n      dispatch(clearMovies());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    // MEMO: check if query parsing has finished\r\n    if (Router.router.asPath !== LINKS.HOME.HREF && checkEmptyObject(query)) return;\r\n\r\n    const initialCategoryName = Router.query[QUERY_PARAMS.CATEGORY];\r\n    const initialPage = Router.query[QUERY_PARAMS.PAGE];\r\n\r\n    if (!initialCategoryName && !initialPage) {\r\n      const newCategoryName = STATIC_MOVIE_CATEGORIES[0].name;\r\n      const newPage = 1;\r\n      console.log('[Home useEffect - no initial category name & no initial page] query parameter update: newCategoryName, newPage => ', newCategoryName, newPage);\r\n      Router.replace({\r\n        query: {\r\n          [QUERY_PARAMS.CATEGORY]: newCategoryName,\r\n          [QUERY_PARAMS.PAGE]: newPage\r\n        }\r\n      });\r\n    } else if (!initialCategoryName && initialPage) {\r\n      const newCategoryName = STATIC_MOVIE_CATEGORIES[0].name;\r\n      const newPage = initialPage;\r\n      console.log('[Home useEffect - no initial category name] query parameter update: newCategoryName, newPage => ', newCategoryName, newPage);\r\n      Router.replace({\r\n        query: {\r\n          [QUERY_PARAMS.CATEGORY]: newCategoryName,\r\n          [QUERY_PARAMS.PAGE]: newPage\r\n        }\r\n      });\r\n    } else if (initialCategoryName && !initialPage) {\r\n      const newCategoryName = initialCategoryName;\r\n      const newPage = 1;\r\n      console.log('[Home useEffect - no initial page] query parameter update: newCategoryName, newPage => ', newCategoryName, newPage);\r\n      Router.replace({\r\n        query: {\r\n          [QUERY_PARAMS.CATEGORY]: newCategoryName,\r\n          [QUERY_PARAMS.PAGE]: newPage\r\n        }\r\n      });\r\n    } else {\r\n      console.log('[Home useEffect - initial category name and initial page] no query parameter update');\r\n    }\r\n  }, [dispatch, query]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!categoryName || !page) return;\r\n\r\n      scroll.scrollToTop({smooth: true});\r\n      \r\n      await dispatch(setSelectedMenuItemName(categoryName));\r\n      dispatch(getStaticCategoryMovies(categoryName, page));\r\n    })();\r\n  }, [categoryName, page, dispatch]);\r\n\r\n  const { secure_base_url: baseUrl } = general.base.images;\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        {/* MEMO: inspired by https://addyosmani.com/blog/preload-hero-images/ */}\r\n        <link\r\n          rel='preload'\r\n          as='fetch'\r\n          // TODO: page is hardcoded\r\n          href={`${TMDB_API_BASE_URL}/${TMDB_API_VERSION}/movie/popular?api_key=${TMDB_API_KEY}&page=1`}\r\n          crossOrigin='true' />\r\n        <title>{`${general.selectedMenuItemName} Movies`}</title>\r\n      </Head>\r\n      {movies.loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <PageWrapper>\r\n          <PaddingWrapper>\r\n            <Header\r\n              title={general.selectedMenuItemName}\r\n              subtitle='movies' />\r\n            <MovieList\r\n              movies={movies}\r\n              baseUrl={baseUrl} />\r\n          </PaddingWrapper>\r\n        </PageWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["window","__NEXT_P","push","name","dispatch","type","TYPES","payload","page","getState","selectedMenuItemName","staticCategories","staticCategoryId","response","general","filter","element","map","id","join","tmdbAPI","TMDB_API_VERSION","params","data","console","log","error","Router","LINKS","useRouter","query","categoryName","useEffect","clearMovies","newPage","initialCategoryName","newCategoryName","scroll","scrollToTop","smooth","setSelectedMenuItemName","getStaticCategoryMovies","rel","as","href","crossOrigin","PaddingWrapper","MovieList","movies","baseUrl"],"sourceRoot":""}