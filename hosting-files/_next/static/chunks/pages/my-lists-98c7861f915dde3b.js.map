{"version":3,"file":"static/chunks/pages/my-lists-98c7861f915dde3b.js","mappings":"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","sources":["webpack://_N_E/?9e69","webpack://_N_E/./components/MyTMDBLists/MyTMDBList/index.js","webpack://_N_E/./components/MyTMDBLists/index.js","webpack://_N_E/./pages/my-lists/index.js","webpack://_N_E/./utils/constants/tmdb.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/my-lists\",\n      function () {\n        return require(\"private-next-pages/my-lists/index.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/my-lists\"])\n      });\n    }\n  ","\r\n\r\nimport LazyLoad from 'react-lazyload';\r\n\r\nimport PosterLink from 'components/PosterLink';\r\nimport Scenery from 'components/Scenery';\r\nimport DetailsPanelWrapper from 'components/DetailsPanelWrapper';\r\nimport PosterTitle from 'components/PosterTitle';\r\nimport LINKS from 'utils/constants/links';\r\nimport CLASS_NAMES from 'utils/constants/class-names';\r\nimport { W500H282 } from 'config/image-sizes';\r\nimport QUERY_PARAMS from 'utils/constants/query-params';\r\nimport { PUBLIC, PRIVATE } from 'utils/constants/tmdb';\r\n\r\nconst POSTER_LINK_CLASS_NAME = 'poster-link';\r\nconst POSTER_TITLE_CLASS_NAME = 'poster-title-color';\r\n\r\nconst MyTMDBList = ({\r\n  theme,\r\n  myList,\r\n  baseUrl\r\n}) => (\r\n  <>\r\n    <LazyLoad\r\n      height={200}\r\n      offset={200}>\r\n      <PosterLink\r\n        className={POSTER_LINK_CLASS_NAME}\r\n        href={{\r\n          pathname: LINKS.LIST.HREF,\r\n          query: {\r\n            [QUERY_PARAMS.ID]: myList.id,\r\n            [QUERY_PARAMS.PAGE]: 1\r\n          }\r\n        }}>\r\n        <Scenery\r\n          width={W500H282.WIDTH}\r\n          height={W500H282.HEIGHT}\r\n          src={`${baseUrl}w${W500H282.WIDTH}${myList.backdrop_path}`} />\r\n        <DetailsPanelWrapper theme={theme}>\r\n          <PosterTitle\r\n            theme={theme}\r\n            style={{\r\n              fontSize: '2.125rem',\r\n              fontWeight: theme.typography.fontWeightBold\r\n            }}\r\n            className={POSTER_TITLE_CLASS_NAME}>\r\n            {myList.name}\r\n          </PosterTitle>\r\n          <PosterTitle\r\n            theme={theme}\r\n            style={{\r\n              fontSize: '1.5rem',\r\n              fontWeight: theme.typography.fontWeightMedium\r\n            }}\r\n            className={POSTER_TITLE_CLASS_NAME}>\r\n            {myList.number_of_items} items ({myList.public ? PUBLIC.toUpperCase() : PRIVATE.toUpperCase()})\r\n          </PosterTitle>\r\n        </DetailsPanelWrapper>\r\n      </PosterLink>\r\n    </LazyLoad>\r\n    {/* TODO: styling duplication */}\r\n    <style jsx>{`\r\n      :global(.${POSTER_LINK_CLASS_NAME}:hover .${CLASS_NAMES.IMAGE_LOADING_PLACEHOLDER}) {\r\n        box-shadow: ${theme.shadows[0]};\r\n        border-radius: 0;\r\n      }\r\n\r\n      :global(.${POSTER_LINK_CLASS_NAME}:hover .${POSTER_TITLE_CLASS_NAME}) {\r\n        color: var(--palette-text-primary);\r\n      }\r\n    `}</style>\r\n  </>\r\n);\r\n\r\nexport default MyTMDBList;\r\n","\r\nimport BackdropsGridContainer from 'components/BackdropsGridContainer';\r\nimport MyTMDBList from './MyTMDBList';\r\nimport Pagination from 'components/Pagination';\r\nimport withTheme from 'utils/hocs/withTheme';\r\n\r\nconst MyTMDBLists = ({\r\n  theme,\r\n  myLists,\r\n  baseUrl\r\n}) => (\r\n  <>\r\n    <BackdropsGridContainer theme={theme}>\r\n      {myLists.results.map(myList => (\r\n        <MyTMDBList\r\n          theme={theme}\r\n          key={myList.id}\r\n          myList={myList}\r\n          baseUrl={baseUrl} />\r\n      ))}\r\n    </BackdropsGridContainer>\r\n    <Pagination\r\n      page={myLists.page}\r\n      totalPages={myLists.total_pages} />\r\n  </>\r\n);\r\n\r\nexport default withTheme(MyTMDBLists);\r\n","\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport Head from 'next/head';\r\nimport { useRouter } from 'next/router';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\n\r\nimport Header from 'parts/Header';\r\nimport NotFound from 'parts/NotFound';\r\nimport PageWrapper from 'parts/PageWrapper';\r\nimport PaddingWrapper from 'parts/PaddingWrapper';\r\nimport MyTMDBLists from 'components/MyTMDBLists';\r\nimport Loader from 'components/UI/Loader';\r\nimport withAuth from 'utils/hocs/withAuth';\r\nimport { TMDB_API_NEW_VERSION, TMDB_IMAGE_BASE_URL } from 'config/tmdb';\r\nimport QUERY_PARAMS from 'utils/constants/query-params';\r\nimport STATUSES from 'utils/constants/statuses';\r\nimport tmdbAPI from 'services/tmdbAPI';\r\n\r\nconst MyLists = ({\r\n  accountId,\r\n  accessToken\r\n}) => {\r\n  const { query } = useRouter();\r\n\r\n  const [status, setStatus] = useState(STATUSES.IDLE);\r\n  // TODO: could handle errors\r\n  const [error, setError] = useState(null);\r\n\r\n  const [myLists, setMyLists] = useState(null);\r\n\r\n  const page = Number(query[QUERY_PARAMS.PAGE]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!page) return;\r\n      if (!accountId) return;\r\n      if (!accessToken) return;\r\n\r\n      scroll.scrollToTop({smooth: true});\r\n\r\n      try {\r\n        setStatus(STATUSES.PENDING);\r\n        const response = await tmdbAPI.get(`/${TMDB_API_NEW_VERSION}/account/${accountId}/lists`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`\r\n          },\r\n          params: {\r\n            page\r\n          }\r\n        });\r\n        const myLists = response.data;\r\n        setMyLists(myLists);\r\n      } catch (error) {\r\n        console.log('[MyLists useEffect] error => ', error);\r\n        setStatus(STATUSES.REJECTED);\r\n        setError(error);\r\n      }\r\n    })();\r\n  }, [page, accountId, accessToken]);\r\n\r\n  useEffect(() => {\r\n    if (!myLists) return;\r\n\r\n    setStatus(STATUSES.RESOLVED);\r\n  }, [myLists]);\r\n\r\n  if (status === STATUSES.IDLE || status === STATUSES.PENDING) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (status === STATUSES.REJECTED) {\r\n    // TODO: should show proper error message based on error state\r\n    return (\r\n      <NotFound\r\n        title='Sorry!'\r\n        subtitle={error?.message ?? 'There were no my lists...'} />\r\n    );\r\n  }\r\n\r\n  if (status === STATUSES.RESOLVED) {\r\n    return (\r\n      <>\r\n        <Head>\r\n          <title>My Lists</title>\r\n        </Head>\r\n        <PageWrapper>\r\n          <PaddingWrapper>\r\n            <Header\r\n              title='My Lists'\r\n              subtitle='TMDB' />\r\n            <MyTMDBLists\r\n              myLists={myLists}\r\n              baseUrl={TMDB_IMAGE_BASE_URL} />\r\n          </PaddingWrapper>\r\n        </PageWrapper>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default withAuth(MyLists);\r\n","\r\n\r\nconst TMDB_MEDIA_TYPES = Object.freeze({\r\n  MOVIE: 'movie',\r\n  TV: 'tv'\r\n});\r\n\r\nconst PUBLIC = 'public';\r\nconst PRIVATE = 'private';\r\n\r\nexport {\r\n  TMDB_MEDIA_TYPES,\r\n  PUBLIC,\r\n  PRIVATE\r\n}\r\n"],"names":["window","__NEXT_P","push","POSTER_LINK_CLASS_NAME","POSTER_TITLE_CLASS_NAME","theme","myList","baseUrl","LazyLoad","height","offset","PosterLink","className","href","pathname","LINKS","query","QUERY_PARAMS","id","Scenery","width","W500H282","src","backdrop_path","DetailsPanelWrapper","PosterTitle","style","fontSize","fontWeight","typography","fontWeightBold","name","fontWeightMedium","number_of_items","public","PUBLIC","PRIVATE","CLASS_NAMES","shadows","withTheme","myLists","BackdropsGridContainer","results","map","MyTMDBList","Pagination","page","totalPages","total_pages","withAuth","error","accountId","accessToken","useRouter","useState","STATUSES","status","setStatus","setError","setMyLists","Number","useEffect","response","scroll","smooth","tmdbAPI","TMDB_API_NEW_VERSION","headers","params","data","console","log","Loader","NotFound","title","subtitle","message","Head","PageWrapper","PaddingWrapper","Header","MyTMDBLists","TMDB_IMAGE_BASE_URL","TMDB_MEDIA_TYPES","Object","freeze","MOVIE","TV"],"sourceRoot":""}